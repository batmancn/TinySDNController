/* C code produced by gperf version 2.8 (ACE version) */
/* Command-line: ../../../bin/ace_gperf -a -k1,2,$ modula3.gperf  */
#include "ace/OS_NS_string.h"

#define TOTAL_KEYWORDS 106
#define MIN_WORD_LENGTH 2
#define MAX_WORD_LENGTH 9
#define MIN_HASH_VALUE 6
#define MAX_HASH_VALUE 302
#define HASH_VALUE_RANGE 297
#define DUPLICATES 0
#define WORDLIST_SIZE 112

static unsigned int
hash (const char *str, unsigned int len)
{
  static unsigned short asso_values[] =
    {
     303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
     303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
     303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
     303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
     303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
     303, 303, 303, 303, 303, 303, 303, 303, 303, 303,
     303, 303, 303, 303, 303,  20,  25,  10,  75,   0,
      45, 303,  10,  55, 303,  30,  15,   5,   0,  60,
      20, 303, 120,  10,  10,  20,  55,  10,  35, 110,
     303, 303, 303, 303, 303, 303, 303,  40, 100,  55,
      40,   0,  85, 303,  10, 110, 303,  15,  85, 115,
       0,  65,   0, 303,   0,  40,  25,   5,  65,   5,
      75,   0, 303, 303, 303, 303, 303, 303,
    };
  return len + asso_values[(int) str[1]] + asso_values[(int) str[0]] + asso_values[(int) str[len - 1]];
}

const char *
in_word_set (const char *str, unsigned int len)
{
  static const char *wordlist[] =
    {
      "","","","","","",
      "return", 
      "",
      "readonly", 
      "procedure", 
      "",
      "unsafe", 
      "","","","","","","",
      "ELSE", 
      "while", 
      "",
      "METHODS", 
      "SET", 
      "THEN", 
      "WHILE", 
      "UNSAFE", 
      "",
      "try", 
      "type", 
      "BEGIN", 
      "repeat", 
      "",
      "typecase", 
      "CASE", 
      "","","","",
      "then", 
      "UNTIL", 
      "","",
      "end", 
      "EXCEPTION", 
      "array", 
      "record", 
      "","",
      "EXIT", 
      "",
      "EXCEPT", 
      "EXPORTS", 
      "untraced", 
      "","","",
      "IN", 
      "","","",
      "INLINE", 
      "","",
      "INTERFACE", 
      "ELSIF", 
      "",
      "or", 
      "set", 
      "","",
      "MODULE", 
      "",
      "NOT", 
      "EVAL", 
      "",
      "IMPORT", 
      "",
      "END", 
      "WITH", 
      "VALUE", 
      "","",
      "and", 
      "exception", 
      "CONST", 
      "raises", 
      "",
      "ref", 
      "else", 
      "","","",
      "not", 
      "BITS", 
      "until", 
      "","",
      "AND", 
      "case", 
      "",
      "OBJECT", 
      "by", 
      "UNTRACED", 
      "exit", 
      "begin", 
      "except", 
      "",
      "var", 
      "LOCK", 
      "value", 
      "",
      "in", 
      "","","",
      "inline", 
      "","",
      "interface", 
      "","",
      "exports", 
      "",
      "TYPE", 
      "",
      "RETURN", 
      "",
      "TYPECASE", 
      "with", 
      "","",
      "TO", 
      "","","",
      "REPEAT", 
      "","","","","","",
      "MOD", 
      "","","",
      "IF", 
      "",
      "PROCEDURE", 
      "const", 
      "",
      "OF", 
      "for", 
      "eval", 
      "",
      "RAISES", 
      "to", 
      "","","","",
      "methods", 
      "","","","","",
      "REF", 
      "lock", 
      "","",
      "do", 
      "",
      "FROM", 
      "elsif", 
      "","","","","","","","","",
      "",
      "module", 
      "",
      "DIV", 
      "","","","","","","",
      "object", 
      "DO", 
      "VAR", 
      "","",
      "RECORD", 
      "finally", 
      "",
      "from", 
      "","","","","","","","","",
      "","","",
      "FINALLY", 
      "div", 
      "","","","",
      "mod", 
      "","","","",
      "FOR", 
      "","","","","","","","",
      "of", 
      "READONLY", 
      "","","","",
      "TRY", 
      "","","",
      "BY", 
      "","","","","","",
      "bits", 
      "ARRAY", 
      "import", 
      "","","","","","","","","",
      "","","","","","","","","",
      "","","","","","","",
      "if", 
      "","","","","","","","","",
      "","","","","","","","","",
      "","OR", 
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key];

          if (*str == *s && !ACE_OS::strcmp (str + 1, s + 1))
            return s;
        }
    }
  return 0;
}
